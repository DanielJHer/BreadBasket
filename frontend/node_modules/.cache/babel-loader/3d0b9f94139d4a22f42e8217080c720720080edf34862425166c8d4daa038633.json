{"ast":null,"code":"var _jsxFileName = \"/Users/danielher/repos/breadbasket/frontend/src/Components/OrderForm.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport ProductCard from './ProductCard';\nimport DatePicker from './DatePicker';\nimport { auth } from '../firebase';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function OrderForm() {\n  _s();\n  // use state\n  const [products, setProducts] = useState([]);\n  const [order, setOrder] = useState({});\n  const [resetSignal, setResetSignal] = useState(false);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [completeOrder, setCompleteOrder] = useState({});\n  const [currentTimestamp, setCurrentTimestamp] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // fetching json file with products list\n  useEffect(() => {\n    fetch('products.json').then(response => response.json().then(data => setProducts(data)));\n  }, []);\n\n  // handle the quantity change\n  const handleQuantityChange = (productId, quantity) => {\n    setOrder(prevOrder => ({\n      ...prevOrder,\n      [productId]: quantity\n    }));\n  };\n\n  // handle submission by rendering confirmation box\n  const handleSubmit = e => {\n    e.preventDefault();\n\n    // Check if all quantities are zero or not set\n    const isEmptyOrder = products.every(product => !order[product.id]);\n    if (isEmptyOrder) {\n      setErrorMessage('Your order is empty. Please add at least one item.');\n      return;\n    }\n\n    // setting current timestamp\n    const currentDate = new Date();\n    const currentTimestamp = currentDate.toISOString().split('T')[0];\n    setCurrentTimestamp(currentTimestamp);\n\n    // setting the complete order\n    const CompleteOrder = {\n      deliverydate: selectedDate,\n      orderdate: currentTimestamp,\n      items: products.map(product => ({\n        id: product.id,\n        name: product.name,\n        quantity: order[product.id] || 0\n      }))\n    };\n    setCompleteOrder(CompleteOrder);\n\n    // Show confirmation dialog\n    setShowConfirmation(true);\n\n    // Clear any previous error messages\n    setErrorMessage('');\n  };\n\n  // clear order form\n  const handleClear = () => {\n    setOrder({});\n    setSelectedDate('');\n    setResetSignal(!resetSignal);\n  };\n\n  // handle cancellation\n  const handleCancel = () => {\n    setShowConfirmation(false);\n  };\n\n  // handle confirm order\n  const handleConfirm = async () => {\n    try {\n      const token = await auth.currentUser.getIdToken();\n      const response = await fetch('http://localhost:5000/submit-order', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          token,\n          items: completeOrder.items,\n          date: completeOrder.date,\n          orderTime: currentTimestamp\n        })\n      });\n      if (response.ok) {\n        console.log('Order confirmed:', completeOrder, 'at', currentTimestamp);\n        setOrder({});\n        setSelectedDate('');\n        setResetSignal(!resetSignal);\n        setShowConfirmation(false);\n      } else {\n        console.error('Error confirming order:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error confirming order:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"order-form\",\n        children: products.map(product => {\n          return /*#__PURE__*/_jsxDEV(ProductCard, {\n            product: product,\n            onQuantityChange: handleQuantityChange,\n            resetSignal: resetSignal\n          }, product.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DatePicker, {\n        selectedDate: selectedDate,\n        onDateChange: setSelectedDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button-field\",\n        children: /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"submit-button\",\n              type: \"submit\",\n              children: \"Submit Order\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 133,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"clear-button\",\n              type: \"button\",\n              onClick: handleClear,\n              children: \"Clear Order\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 138,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 137,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), errorMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: errorMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 24\n    }, this), showConfirmation && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"confirmation-dialog-overlay\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"confirmation-dialog\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Confirm Order\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Are you sure you want to submit this order?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: completeOrder.items.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"name\",\n              children: [item.name, \":\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 158,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"quantity\",\n              children: item.quantity\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 19\n            }, this)]\n          }, item.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Order Date: \", currentTimestamp]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Delivery Date: \", selectedDate]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"confirm-button\",\n          onClick: handleConfirm,\n          children: \"Yes, I'm sure.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"confirm-button\",\n          onClick: handleCancel,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 112,\n    columnNumber: 5\n  }, this);\n}\n_s(OrderForm, \"9E8AsZvZL9U6Ap3Sa/d1FyE69gQ=\");\n_c = OrderForm;\nvar _c;\n$RefreshReg$(_c, \"OrderForm\");","map":{"version":3,"names":["React","useEffect","useState","ProductCard","DatePicker","auth","jsxDEV","_jsxDEV","OrderForm","_s","products","setProducts","order","setOrder","resetSignal","setResetSignal","showConfirmation","setShowConfirmation","completeOrder","setCompleteOrder","currentTimestamp","setCurrentTimestamp","selectedDate","setSelectedDate","errorMessage","setErrorMessage","fetch","then","response","json","data","handleQuantityChange","productId","quantity","prevOrder","handleSubmit","e","preventDefault","isEmptyOrder","every","product","id","currentDate","Date","toISOString","split","CompleteOrder","deliverydate","orderdate","items","map","name","handleClear","handleCancel","handleConfirm","token","currentUser","getIdToken","method","headers","body","JSON","stringify","date","orderTime","ok","console","log","error","statusText","children","onSubmit","className","onQuantityChange","fileName","_jsxFileName","lineNumber","columnNumber","onDateChange","type","onClick","item","_c","$RefreshReg$"],"sources":["/Users/danielher/repos/breadbasket/frontend/src/Components/OrderForm.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport ProductCard from './ProductCard';\nimport DatePicker from './DatePicker';\nimport { auth } from '../firebase';\n\nexport default function OrderForm() {\n  // use state\n  const [products, setProducts] = useState([]);\n  const [order, setOrder] = useState({});\n  const [resetSignal, setResetSignal] = useState(false);\n  const [showConfirmation, setShowConfirmation] = useState(false);\n  const [completeOrder, setCompleteOrder] = useState({});\n  const [currentTimestamp, setCurrentTimestamp] = useState('');\n  const [selectedDate, setSelectedDate] = useState('');\n  const [errorMessage, setErrorMessage] = useState('');\n\n  // fetching json file with products list\n  useEffect(() => {\n    fetch('products.json').then((response) =>\n      response.json().then((data) => setProducts(data))\n    );\n  }, []);\n\n  // handle the quantity change\n  const handleQuantityChange = (productId, quantity) => {\n    setOrder((prevOrder) => ({\n      ...prevOrder,\n      [productId]: quantity,\n    }));\n  };\n\n  // handle submission by rendering confirmation box\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // Check if all quantities are zero or not set\n    const isEmptyOrder = products.every((product) => !order[product.id]);\n    if (isEmptyOrder) {\n      setErrorMessage('Your order is empty. Please add at least one item.');\n      return;\n    }\n\n    // setting current timestamp\n    const currentDate = new Date();\n    const currentTimestamp = currentDate.toISOString().split('T')[0];\n    setCurrentTimestamp(currentTimestamp);\n\n    // setting the complete order\n    const CompleteOrder = {\n      deliverydate: selectedDate,\n      orderdate: currentTimestamp,\n      items: products.map((product) => ({\n        id: product.id,\n        name: product.name,\n        quantity: order[product.id] || 0,\n      })),\n    };\n    setCompleteOrder(CompleteOrder);\n\n    // Show confirmation dialog\n    setShowConfirmation(true);\n\n    // Clear any previous error messages\n    setErrorMessage('');\n  };\n\n  // clear order form\n  const handleClear = () => {\n    setOrder({});\n    setSelectedDate('');\n    setResetSignal(!resetSignal);\n  };\n\n  // handle cancellation\n  const handleCancel = () => {\n    setShowConfirmation(false);\n  };\n\n  // handle confirm order\n  const handleConfirm = async () => {\n    try {\n      const token = await auth.currentUser.getIdToken();\n\n      const response = await fetch('http://localhost:5000/submit-order', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          token,\n          items: completeOrder.items,\n          date: completeOrder.date,\n          orderTime: currentTimestamp,\n        }),\n      });\n\n      if (response.ok) {\n        console.log('Order confirmed:', completeOrder, 'at', currentTimestamp);\n        setOrder({});\n        setSelectedDate('');\n        setResetSignal(!resetSignal);\n        setShowConfirmation(false);\n      } else {\n        console.error('Error confirming order:', response.statusText);\n      }\n    } catch (error) {\n      console.error('Error confirming order:', error);\n    }\n  };\n\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <div className=\"order-form\">\n          {products.map((product) => {\n            return (\n              <ProductCard\n                key={product.id}\n                product={product}\n                onQuantityChange={handleQuantityChange}\n                resetSignal={resetSignal}\n              />\n            );\n          })}\n        </div>\n        <DatePicker\n          selectedDate={selectedDate}\n          onDateChange={setSelectedDate}\n        />\n        <div className=\"button-field\">\n          <ul>\n            <li>\n              <button className=\"submit-button\" type=\"submit\">\n                Submit Order\n              </button>\n            </li>\n            <li>\n              <button\n                className=\"clear-button\"\n                type=\"button\"\n                onClick={handleClear}\n              >\n                Clear Order\n              </button>\n            </li>\n          </ul>\n        </div>\n      </form>\n      {errorMessage && <div className=\"error-message\">{errorMessage}</div>}\n      {showConfirmation && (\n        <div className=\"confirmation-dialog-overlay\">\n          <div className=\"confirmation-dialog\">\n            <h2>Confirm Order</h2>\n            <p>Are you sure you want to submit this order?</p>\n            <ul>\n              {completeOrder.items.map((item) => (\n                <li key={item.id}>\n                  <span className=\"name\">{item.name}:</span>\n                  <span className=\"quantity\">{item.quantity}</span>\n                </li>\n              ))}\n            </ul>\n            <p>Order Date: {currentTimestamp}</p>\n            <p>Delivery Date: {selectedDate}</p>\n            <button className=\"confirm-button\" onClick={handleConfirm}>\n              Yes, I'm sure.\n            </button>\n            <button className=\"confirm-button\" onClick={handleCancel}>\n              Cancel\n            </button>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}